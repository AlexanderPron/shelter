# Generated by Django 3.1.5 on 2021-02-01 21:54

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pets.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(default='нет имени', max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(default='нет фамилии', max_length=100, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('phone', models.BigIntegerField(blank=True, help_text='ТОЛЬКО цифры', null=True, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Почта')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Адрес')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
                'ordering': ['last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Пока без имени', help_text='Укажите кличку животного', max_length=100, verbose_name='Кличка')),
                ('pet_type', models.CharField(choices=[('Cat', 'Кошка'), ('Dog', 'Собака'), ('Parrot', 'Попугай')], default='Cat', max_length=10, verbose_name='Вид')),
                ('breed', models.CharField(default='Неизвестно', help_text='Укажите породу животного', max_length=100, verbose_name='Порода')),
                ('sex', models.CharField(choices=[('M', 'Мужской'), ('F', 'Женский'), ('n/a', 'Не известно')], default='n/a', max_length=3, verbose_name='Пол')),
                ('enter_date', models.DateField(default=datetime.date.today, verbose_name='Дата поступления')),
                ('approximate_age', models.SmallIntegerField(null=True, verbose_name='Возраст')),
                ('available', models.BooleanField(default=True, verbose_name='Доступен')),
                ('description', models.TextField(verbose_name='Описание')),
                ('avatar', models.ImageField(blank=True, upload_to=pets.models.path_for_pet_avatar, verbose_name='Аватар')),
            ],
            options={
                'verbose_name': 'Питомец',
                'verbose_name_plural': 'Питомцы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ShelteredPets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sheltered_date', models.DateField(default=datetime.date.today, verbose_name='Дата приюта')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owners', to=settings.AUTH_USER_MODEL, verbose_name='Хозяин')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pets', to='pets.pet', verbose_name='Питомец')),
            ],
            options={
                'verbose_name': 'Устроенные животные',
                'verbose_name_plural': 'Устроенные животные',
                'ordering': ['-sheltered_date'],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, upload_to=pets.models.path_for_pet_img, verbose_name='Фото')),
                ('uplaod_date', models.DateField(auto_now=True, verbose_name='Дата загрузки фото')),
                ('pet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='pets.pet')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фотографии',
            },
        ),
    ]
